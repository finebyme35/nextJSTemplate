import DatePicker from "components/DatePicker";
import Dropdown from "components/Dropdown";
import Input from "components/Input";
import InputMinMax from "components/InputMinMax";
import PhoneInput from "components/PhoneInput";
import { SelectColumnFilter } from "components/TableComponent/TableSelectColumnFilter";
import Switch from "components/Switch";
import Table from "components/TableComponent/Table";
import { StatusPill } from "components/TableComponent/TableStatusPill";
import Head from "next/head";
import { useCallback, useEffect, useMemo, useState } from "react";
import { carouselData, getData, tabsData, testProgressBarData } from "utils/mockData";
import { AvatarCell } from "components/TableComponent/TableAvatarCell";
import ProgressStatus from "components/ProgressStatus";
import RichTextSunEditor from "components/RichTextSunEditor";
import baseFetchHook from "hooks/baseFetchHook";
import ProgressBar from "components/ProgressBar";
import Carousel from "components/Carousel";
import FormExample from "components/FormExampleWithReactHookForm";
import FormExampleWithInputComponent from "components/FormExampleWithInputComponent";
import { InputColumnFilter } from "components/TableComponent/TableInputColumnFilter";
import ImageGride from "components/Dropzone/ImageGrid";
import FileUpload from "components/FileUpload";
import Tabs from "components/TabAndTabPane.tsx/Tabs";
import TabPane from "components/TabAndTabPane.tsx/TabPane";
import Dropzones from "components/Dropzone/Dropzone";
import { processMinerService } from "utils/request/requestService/processMinerRequest";
import { HeuristicNetImageService } from "utils/request/requestService/heuristicNetImageRequest";
import HeuristicsNetDiagram from "components/Heuristic/HeuristicNetVisualization";
import HeuristicsNetTree from "components/Heuristic/HeuristicNetVisualization";
import ReactDropzoneFileUpload from "components/ReactDropzone/ReactDropzone";

export default function Home({ processMiners, heuristic }: any) {
  console.log(heuristic.jsonFile)
  const columns = useMemo(
    () => [
      {
        Header: "Case ID",
        accessor: "caseID",
        Filter: InputColumnFilter,
      },
      {
        Header: "Start TimeStamp",
        accessor: "startTimestamp",
        filter: "includes",
      },
      {
        Header: "Complete TimeStamp",
        accessor: "completeTimestamp",
        filter: "includes",
      },
      {
        Header: "Activity",
        accessor: "activity",
        filter: "includes",
      },
      {
        Header: "Resource",
        accessor: "resource",
        filter: "includes",
      },
      {
        Header: "Role",
        accessor: "role",
        Filter: SelectColumnFilter,
        filter: "includes",
      },
    
    ],
    []
  );
  const handleFileUpload = async (file: File) => {
    try {
      const formData = new FormData();
      formData.append("file", file);
      const result = await HeuristicNetImageService.postFile(formData);
      console.log(result);
    } catch (error) {
      console.error("Error uploading file:", error);
    }
  };
  return (
    <>
      <Head>
        <title>Process Miner</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex justify-between align-middle items-center">
        <div>
        <h1>Yükleme kısmı</h1>
          <ReactDropzoneFileUpload onFileUpload={handleFileUpload} />
        </div>
        <h1>keşfet yeri</h1>
        <h1>istatistik yeri</h1>
        <h1>filtre yeri</h1>
      </div>
      <main className="flex justify-between align-middle items-center gap-3">
        <div className="h-full mr-1">
          <HeuristicsNetDiagram graphData={heuristic.jsonFile} />
        </div>
      <div>
        <Table columns={columns} data={processMiners} />
      </div>
      </main>
      <FileUpload />
     

    </>
  );
};


export async function getServerSideProps() {
  const processMiners = await processMinerService.allProcessMiner();
  const heuristic = await HeuristicNetImageService.getHeuristicImage();
  return {
    props: {
      processMiners: processMiners,
      heuristic: heuristic
    },
  };
}